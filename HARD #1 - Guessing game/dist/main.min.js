(function () {
'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var UIElement = function () {
	function UIElement() {
		classCallCheck(this, UIElement);

		this.element;
	}

	createClass(UIElement, [{
		key: "render",
		value: function render(target) {
			if (target) {
				var targetElement = document.getElementsByClassName(target)[0];
				if (targetElement) {
					targetElement.appendChild(this.element);
				}
			}
		}
	}]);
	return UIElement;
}();

var Button = function (_UIElement) {
	inherits(Button, _UIElement);

	function Button(id, className, text) {
		classCallCheck(this, Button);

		var _this = possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this));

		_this.element = document.createElement('button');
		_this.element.innerText = text;
		_this.element.setAttribute('id', id);
		_this.element.classList.add('btn', className);
		return _this;
	}

	createClass(Button, [{
		key: 'event',
		value: function event(_event, callback) {
			console.log('Adding event "' + _event + '" for #' + this.element.getAttribute('id'), callback);
			this.element.addEventListener(_event, callback);
		}
	}]);
	return Button;
}(UIElement);

var Text = function (_UIElement) {
	inherits(Text, _UIElement);

	function Text(text) {
		classCallCheck(this, Text);

		var _this = possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this));

		_this.element = document.createElement('p');
		_this.element.innerText = text;
		_this.element.classList.add('text');
		return _this;
	}

	return Text;
}(UIElement);

var NumberField = function (_UIElement) {
	inherits(NumberField, _UIElement);

	function NumberField(id, className) {
		classCallCheck(this, NumberField);

		var _this = possibleConstructorReturn(this, (NumberField.__proto__ || Object.getPrototypeOf(NumberField)).call(this));

		_this.element = document.createElement('div');
		_this.element.classList.add(className);
		_this.element.setAttribute('id', id);
		return _this;
	}

	return NumberField;
}(UIElement);

var UIHandler = function () {
	function UIHandler() {
		classCallCheck(this, UIHandler);

		// All used UI elements
		this.buttons = {
			start: new Button('play', 'btn--green', 'Play!'),
			higher: new Button('higher', 'btn--green', 'Higher!'),
			lower: new Button('lower', 'btn--red', 'Lower!'),
			correct: new Button('correct', 'btn--blue', 'Correct!'),
			restart: new Button('restart', 'btn--red', 'Restart!')
		};
		this.text = {
			intro: new Text('Let\'s play a number guessing game.'),
			inGame: new Text('Is your number...'),
			impossible: new Text('This game is impossible!'),
			win: new Text('So I finally won the game! Thanks for playing with me. :)')
		};
		this.numberField = new NumberField("numberField", "number");

		// What is rendered on particular stages
		this.mainMenu = {
			game__content: [this.text.intro],
			game__buttons: [this.buttons.start]
		};
		this.gamePlay = {
			game__content: [this.text.inGame, this.numberField],
			game__buttons: [this.buttons.higher, this.buttons.correct, this.buttons.lower]
		};
		this.Impossible = {
			game__content: [this.text.impossible],
			game__buttons: [this.buttons.restart]
		};
		this.Win = {
			game__content: [this.text.win],
			game__buttons: [this.buttons.restart]
		};
	}

	createClass(UIHandler, [{
		key: 'clear',
		value: function clear() {
			console.log('Clearing game');
			document.getElementsByClassName('game__content')[0].innerHTML = '';
			document.getElementsByClassName('game__buttons')[0].innerHTML = '';
		}
	}, {
		key: 'render',
		value: function render(gameStatus) {
			var _this = this;

			this.clear();

			var _loop = function _loop(x) {
				console.log(_this[gameStatus][x]);
				_this[gameStatus][x].forEach(function (element) {
					if (element.render) element.render(x);
				});
			};

			for (var x in this[gameStatus]) {
				_loop(x);
			}
		}
	}, {
		key: 'renderNumber',
		value: function renderNumber(number) {
			this.numberField.element.innerText = number + '?';
		}
	}]);
	return UIHandler;
}();

var Game = function () {
	function Game() {
		classCallCheck(this, Game);

		this.status = 'mainMenu';
		this.lastNumber = 0;
		this.currentNumber = 0;
		this.numbersGuessed = [];

		this.minNumber = 0;
		this.maxNumber = 100;

		this.UI = new UIHandler();
	}

	createClass(Game, [{
		key: 'init',
		value: function init() {
			var _this = this;
			this.setStatus('mainMenu');
			this.UI.buttons['start'].event("click", function () {
				return _this.startGame();
			});
			this.UI.buttons['higher'].event("click", function () {
				return _this.checkAnswer('higher');
			});
			this.UI.buttons['lower'].event("click", function () {
				return _this.checkAnswer('lower');
			});
			this.UI.buttons['correct'].event("click", function () {
				return _this.checkAnswer('correct');
			});
			this.UI.buttons['restart'].event("click", function () {
				return _this.startGame();
			});
		}
	}, {
		key: 'getStatus',
		value: function getStatus() {
			return this.status;
		}
	}, {
		key: 'setStatus',
		value: function setStatus(newStatus) {
			this.status = newStatus;
			this.UI.render(this.getStatus());
		}
	}, {
		key: 'startGame',
		value: function startGame() {
			// restore the defaults
			this.currentNumber = 0;
			this.lastNumber = 0;
			this.numbersGuessed = [];
			this.minNumber = 0;
			this.maxNumber = 100;

			// start the game
			this.setStatus("gamePlay");
			this.generateNumber();
		}
	}, {
		key: 'generateNumber',
		value: function generateNumber() {
			this.currentNumber = this.getRandomNumber();
			this.UI.renderNumber(this.currentNumber);
		}
	}, {
		key: 'checkAnswer',
		value: function checkAnswer(answer) {
			this.lastNumber = this.currentNumber;
			this.numbersGuessed.push(this.currentNumber);

			if (answer == 'higher') {
				this.minNumber = this.lastNumber;
			} else if (answer == 'lower') {
				this.maxNumber = this.lastNumber;
			} else if (answer == 'correct') {
				this.setStatus('Win');
				return true;
			}

			console.log('Numbers: ' + this.numbersGuessed, 'min: ' + this.minNumber, 'max: ' + this.maxNumber);
			if (this.minNumber + 1 >= this.maxNumber) {
				this.setStatus('Impossible');
				return false;
			}
			this.generateNumber();
		}
	}, {
		key: 'getRandomNumber',
		value: function getRandomNumber() {
			do {
				var number = Math.floor(Math.random() * (this.maxNumber - this.minNumber + 1)) + this.minNumber;
			} while (this.numbersGuessed.includes(number) && this.minNumber < this.maxNumber);
			return number;
		}
	}]);
	return Game;
}();

var game = new Game();
game.init();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
